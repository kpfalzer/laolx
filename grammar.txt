//add decomposition declaration:
// auto& [l1, l2] = expr_returns_2_elements


XFile: IncludeStatement* (Declaration | Statement)* EOF

IncludeStatement: K_INCLUDE StringList

XString: SQSTRING | DQSTRING

StringList: XString (COMMA XString)+

Declaration: ClassDeclaration 
           | InterfaceDeclaration
           | VariableDeclaration 
           | TypedefDeclaration 
           | ConstantDeclaration 
           | MethodDeclaration 
           | NamespaceDeclaration

UnionType: S_LPAREN Type (S_OR Type)* S_RPAREN

Type: UnionType | PrimitiveType | SimpleType | ScopedType

SimpleType: TypeName TypeModifier?

TypeName: IDENT

PrimitiveType: K_SYMBOL | K_STRING | K_INT | K_FLOAT

TypeModifier: ActualTypeParameters? ArrayTypeModifier? K_DOT3?

ArrayTypeModifier: LBRACK RBRACK

ScopedType: ScopeName (COLON2 ScopeName)+ ArrayTypeModifier?

ScopeName: IDENT ActualTypeParameters?

TypeParameters: LT IDENT (COMMA IDENT)* GT

ActualTypeParameters: LT Type (COMMA Type)* GT

Visibility: K_PUBLIC | K_PROTECTED | K_PRIVATE

/**
//example of class:
class foo<T1,T2>(int @p1, string @p2) extends C1, C2 implements I1 {
	int +a = 14;	// '+' implies mutable
	T v = 17;       // const T v = 17;
}
//TODO: eventually add multiple decl
class A(int p1, p1; T p2, p3; T2 p2, T3 p4) {}
**/

ClassDeclaration: K_CLASS IDENT TypeParameters? 
				  ParameterDeclarationList?
				  ExtendsDeclaration?
				  ImplementsDeclaration?
				  LCURLY ClassBody? RCURLY

Mutability: K_CONST

ParameterDeclaration: Visibility? Mutability? Type ParameterName

ParameterName: IDENT | ATTR_DECL | ATTR_DECL_RO | ATTR_DECL_RW

ParameterDeclarationList: 
	LPAREN ParameterDeclaration 
    (COMMA ParameterDeclaration) RPAREN

BaseName: IDENT (COLON2 IDENT)* ActualTypeParameters?

ExtendsDeclaration: K_EXTENDS BaseName (COMMA BaseName)*

ImplementsDeclaration: K_IMPLEMENTS BaseName (COMMA BaseName)*

ClassBody: ???
	+ how to specify visibility
	+ initial statement/decls are part of default constructor
	+ method return values?
	+ other attributes
