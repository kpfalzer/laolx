//NOTE: make sure we can easily specify a new member, as we go...
//      In ruby, all we do is declare '@foo'

//add decomposition declaration:
// auto& [l1, l2] = expr_returns_2_elements

SourceFile: ImportStatement* (Declaration | Statement)* EOF

ImportStatement: K_IMPORT ImportSpecifierList

String: SQSTRING | DQSTRING | EVALSTRING

ImportSpecifierList: ImportSpecifier (COMMA ImportSpecifier)*

ImportSpecifier: IDENT (S_DOT IDENT)* (K_AS IDENT)?

// extern linkage declarations do not have bodies, etc.
Linkage: K_EXTERN String

Declaration: 
	Linkage? ClassDeclaration 
| 	Linkage? InterfaceDeclaration
| 	Linkage? VariableDeclaration 
| 	Linkage? MethodDeclaration 
| 	TypedefDeclaration 
| 	NamespaceDeclaration

NamespaceDeclaration:
	K_NAMESPACE NamespaceDeclarationName S_LCURLY Declaration* S_RCURLY

NamespaceDeclarationName: Name (S_DOT Name)*

Access: K_PUBLIC | K_PROTECTED | K_PRIVATE

/**
//example of class:
// p1 and p2 are readonly attributes
class foo<T1,T2>(int @p1, string @p2) : public C1, C2(a:p1), I(a:p1,b:p2) {
	int @a = 14;	// a is an attribute
	T v = 17;       // const T v = 17;
}
//TODO: eventually add multiple decl
class A(int p1, p1; T p2, p3; T2 p2, T3 p4) {}
**/

ClassDeclaration: 
	K_CLASS IDENT TemplateParameterList? 
  		MethodParametersDeclaration?
  		BaseClause?
  		LCURLY ClassBody? RCURLY

InterfaceDeclaration:
	K_INTERFACE IDENT TemplateParameterList?
		//An interface cannot inherit
  		LCURLY MethodDeclaration* RCURLY

TemplateParameterList:
	S_LT TemplateParameter (COMMA TemplateParameter)* S_GT

TemplateParameter: IDENT (S_EQ TemplateArgument)?

MethodParametersDeclaration:
	S_LPAREN MethodParameterList? S_RPAREN

MethodParameterList:
	MethodParameter (COMMA MethodParameter)*

MethodParameter:
	Access? Mutability? SimpleTypeSpecifier 
		VarOrAttrName (S_EQ InitializerClause)?

Mutability: K_CONST | K_VAR

VarOrAttrName: Name | ATTR_DECL | ATTR_DECL_RO | ATTR_DECL_RW

// see structured binding: 
// http://en.cppreference.com/w/cpp/language/structured_binding
VariableDeclaration:
	Mutability? K_STATIC? SimpleTypeSpecifier? 
		VarOrAttrName (S_EQ InitializerClause)? 

TypedefDeclaration: K_TYPEDEF SimpleTypeSpecifier IDENT

BaseClause:
	S_COLON BaseSpecifierList

BaseSpecifierList:
	BaseSpecifier (COMMA BaseSpecifier)*

BaseSpecifier:
	Access? BaseTypeSpecifier BaseInitializerSpecifier?	

BaseInitializerSpecifier:
	S_LPAREN BaseInitializerList S_RPAREN

BaseInitializerList:
	BaseInitializer (COMMA BaseInitializer)*

//named association
BaseInitializer:
	(IDENT S_COLON)? InitializerClause
	
BaseTypeSpecifier:
	NestedNameSpecifier? BaseName

// class | interface name
BaseName: IDENT | SimpleTemplateId

InitializerClause: AssignmentExpression | BracedInitList

BracedInitList: 
//	S_LCURLY InitializerList COMMA? S_RCURLY
	S_LCURLY InitializerList S_RCURLY
|	S_LCURLY S_RCURLY

// NOTE: see:
// http://en.cppreference.com/w/cpp/language/list_initialization.html
InitializerList:
	InitializerClause (S_COMMA InitializerClause)*

AssignmentExpression: ConditionalExpression

ConditionalExpression:
	ExpressionEle (S_QMARK Expression S_COLON Expression)?

// NOTE: Semantics of comma operator here are not same as c++/default.
// Here, we are like ruby and create collection.
// (c++: http://en.cppreference.com/w/cpp/language/operator_other)
Expression: AssignmentExpression //kiss: (S_COMMA AssignmentExpression)*

// NOTE: ExpressionEle is simplified logical-or-expression of c++ grammar
ExpressionEle:
	UnaryExpression (BinaryOp ExpressionEle)*

BinaryOp: //see code directly

UnaryExpression:
	PostfixExpression
|	(S_PLUS2 | S_MINUS2) UnaryExpression
|	UnaryOperator UnaryExpression

UnaryOperator: S_PLUS | S_MINUS | S_EXCLAMATION | S_TILDE

// NOTE: removed left recursion: 
// A: A x | y
// by
// A: y A_X?
// A_X: x A_X?
//
PostfixExpression: PostfixExpressionY PostfixExpressionX?

PostfixExpressionY:
	PrimaryExpression
|	SimpleTypeSpecifier S_LPAREN ExpressionList? S_RPAREN
|	SimpleTypeSpecifier BracedInitList

PostfixExpressionX
	S_LBRACK Expression S_RBRACK PostfixExpressionX?
|	S_LBRACK BracedInitList? S_RBRACK PostfixExpressionX?
|	S_LPAREN ExpressionList? S_RPAREN PostfixExpressionX?
|	DOT IdExpression PostfixExpressionX?
|	(S_PLUS2 | S_MINUS2) PostfixExpressionX?

PrimaryExpression:
	Literal
|	K_THIS
|	S_LPAREN Expression S_RPAREN
|	IdExpression
|	LambdaExpression

/**
LambdaExpression:
	S_OR IDENT (COMMA IDENT)* S_OR 
		ReturnSpecifier? 
		S_LCURLY Statement* S_RCURLY
 **/
// Change to look more method-like
LambdaExpression:
	K_DEF Name
		MethodParametersDeclaration?
		ReturnSpecifier?
		S_LCURLY MethodBody S_RCURLY

Literal:
	SYMBOL
|	INT
|	FLOAT
|	String
|	REGEXP
|	Words
|	Symbols
|	K_NIL
|	Bool

Bool: K_TRUE | K_FALSE

Words: S_WORDS IDENT* S_RCURLY

Symbols: S_SYMBOLS IDENT* S_RCURLY

ExpressionList: InitializerList

SimpleTypeSpecifier: SimpleTypeSpecifierX ArraySpecifier*

SimpleTypeSpecifierX:
	NestedNameSpecifier? Name
|	K_INT
|	K_FLOAT
|	K_STRING
|	K_CHAR
|	K_BOOL
|	K_SYMBOL

ArraySpecifier: S_LBRACK S_RBRACK

IdExpression:
	UnqualifiedId
|	QualifiedId

UnqualifiedId:
	IDENT
|	OperatorFunctionId
|	TemplateId

QualifiedId: NestedNameSpecifier UnqualifiedId

NestedNameSpecifier: NestedNameSpecifierY NestedNameSpecifierX?

NestedNameSpecifierY: Name S_DOT

NestedNameSpecifierX:
	IDENT S_DOT NestedNameSpecifierX?
|	SimpleTemplateId S_DOT NestedNameSpecifierX?

Name: IDENT | SimpleTemplateId

SimpleTemplateId: IDENT S_LT TemplateArgumentList? S_GT

// NOTE: we'll use special templates: VARIANT and LAMBDA as needed.
TemplateId:
	SimpleTemplateId
|	OperatorFunctionId S_LT TemplateArgumentList? S_GT

TemplateArgumentList:
	TemplateArgument (S_COMMA TemplateArgument)*
	
// NOTE: While syntax is a bit loose: semantics require all named/bound
//       or all positional; cannot mix these.
TemplateArgument:
	(IDENT S_COLON)?
		(	ConstantExpression
		|	SimpleTypeSpecifier
		)

OperatorFunctionId:
	K_OPERATOR OverloadableOperator

ClassBody:
	MethodBody MethodDeclaration*

MethodBody: MethodBodyItem*

MethodBodyItem:
	TypedefDeclaration
|	MemberVariableDeclaration
|	Statement

MemberVariableDeclaration:
	Access? Mutability? K_STATIC? SimpleTypeSpecifier? VarOrAttrName 
		(S_EQ InitializerClause)? 

MethodDeclaration:
	Access? Mutability? K_STATIC? 
		(	K_DEF Name
		|	K_OPERATOR OverloadableOperator
		)
		MethodParametersDeclaration?
		ReturnSpecifier?
		(S_LCURLY MethodBody S_RCURLY)?

ReturnSpecifier: 
	S_EQGT SimpleTypeSpecifier
|	S_EQGT S_LPAREN SimpleTypeSpecifierList S_RPAREN

Statement:
	Expression
|	CompoundStatement
|	IfStatement
|	CaseStatement
|	JumpStatement
|	IterationStatement
|	ForStatement

// Range based only 'for'
ForStatement:
	K_FOR S_LPAREN IDENT S_COLON Expression S_RPAREN Statement

IterationStatement:
	K_WHILE Condition Statement
|	K_DO Statement K_WHILE Condition

JumpStatement:
	K_BREAK
|	K_CONTINUE
|	K_RETURN (Expression | BracedInitList)?

IfStatement:
	K_IF Condition Statement
		(K_ELSIF Condition Statement)*
		(K_ELSE Statement)?
	
CaseStatement:
	K_CASE Condition S_LCURLY
		(K_WHEN Expression (COMMA Expression)* Statement)+
		(K_ELSE Statement)?
		S_RCURLY

CompoundStatement:
	S_LCURLY Statement* S_RCURLY
